{"mappings":"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","sources":["script.js"],"sourcesContent":["const countryContainer = document.querySelector('.countries');\nconst cityContainer = document.querySelector('.city');\n\nconst getPosition = function () {\n  return new Promise((resolve, reject) => {\n    return navigator.geolocation.getCurrentPosition(resolve, reject);\n  });\n};\n\nconst renderCity = function (res) {\n  const html = `<article class=\"city\">\n  <div class=\"city__data\">\n  <h3 class=\"city__name\">${res.city}</h3>\n    <h4 class=\"city__region\">${res.region}</h4>\n    <p class=\"city__row\"><span>üë´</span>${res.adminareas.admin8.population} people</p>\n  </div>\n</article>`;\n\n  cityContainer.insertAdjacentHTML('afterbegin', html);\n};\n\nconst population = function (pop) {\n  if (pop.length === 4 || pop.length === 5 || pop.length === 6)\n    return 'thousand';\n  if (pop.length > 6) return 'million';\n};\n\nconst renderCountry = function (res) {\n  const country = res[0];\n  console.log(country.population);\n  const html = `<article class=\"country\">\n  <img class=\"country__img\" src=\"${country.flag}\" />\n  <div class=\"country__data\">\n    <h3 class=\"country__name\">${country.name}</h3>\n    <h4 class=\"country__region\">${country.region}</h4>\n    <p class=\"country__row\"><span>üë´</span>${country.population} ${population(\n    String(country.population)\n  )} people</p>\n    <p class=\"country__row\"><span>üó£Ô∏è</span>${country.languages[0].name}</p>\n    <p class=\"country__row\"><span>üí∞</span>${country.currencies[0].name}</p>\n  </div>\n</article>`;\n\n  countryContainer.insertAdjacentHTML('afterbegin', html);\n  countryContainer.style.opacity = 1;\n};\n\nconst getJSON = async function (url) {\n  const posObjGeo = await fetch(url);\n  const resJSON = await posObjGeo.json();\n  return resJSON;\n};\n\nconst whereAmILocated = async function () {\n  const posObj = await getPosition();\n  const { latitude, longitude } = posObj.coords;\n\n  // Reverse geo-coding\n  const resCityJSON = await getJSON(\n    `https://geocode.xyz/${latitude},${longitude}?geoit=json&auth=105550322406220270442x3850`\n  );\n\n  // Render city\n  renderCity(resCityJSON);\n\n  // Get country based on city object\n  const { country } = resCityJSON;\n\n  const resCountryJSON = await getJSON(\n    `https://restcountries.com/v2/name/${country}`\n  );\n\n  // Render country\n  renderCountry(resCountryJSON);\n};\n\nwhereAmILocated();\n"],"names":[],"version":3,"file":"index.810bb8fa.js.map","sourceRoot":"/__parcel_source_root/"}